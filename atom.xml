<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xyongs&#39; blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://goolory.github.io/"/>
  <updated>2020-03-17T03:12:39.955Z</updated>
  <id>https://goolory.github.io/</id>
  
  <author>
    <name>xyongs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo使用</title>
    <link href="https://goolory.github.io/2020/03/17/hello-world/"/>
    <id>https://goolory.github.io/2020/03/17/hello-world/</id>
    <published>2020-03-17T03:05:56.844Z</published>
    <updated>2020-03-17T03:12:39.955Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="日常" scheme="https://goolory.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="hexo" scheme="https://goolory.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>基本算法思想</title>
    <link href="https://goolory.github.io/2019/11/25/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
    <id>https://goolory.github.io/2019/11/25/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/</id>
    <published>2019-11-25T14:21:44.000Z</published>
    <updated>2020-03-17T03:12:39.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本算法思想"><a href="#基本算法思想" class="headerlink" title="基本算法思想"></a>基本算法思想</h2><h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h4><p><a href="https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&mid=2247485458&idx=2&sn=d4bf481c32798a62e44bf3fff577a141&chksm=fa0e6793cd79ee85ca8817826af20431eb451e51b83aa55497ba3b6dbe8d4a8de5d7b048a8fa&scene=21#wechat_redirect" target="_blank" rel="noopener">五分钟了解一下什么是「贪心算法 」</a></p><p>（1）建立数学模型来描述问题。<br>（2）把求解的问题分成若干个子问题。<br>（3）对每一子问题求解，得到子问题的局部最优解。<br>（4）把子问题的局部最优解合成原来问题的一个解。 </p><hr><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><p><a href="https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&mid=2247486904&idx=1&sn=099d5560ab25c0163349dff0c7f51490&chksm=fa0e6239cd79eb2fe6e831d7debba60aa906721d592b8766a944ef88bf91bf82568c20d71891&scene=21#wechat_redirect" target="_blank" rel="noopener">有了四步解题法模板，再也不害怕动态规划！</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486923%26idx%3D2%26sn%3D6c1c8aeb4db68522e67ddf8c1e933660%26chksm%3Dfa0e624acd79eb5cdb410808921609a830b9b9221e813e4eb89cf551ca48f317668d44b095d2%26scene%3D21%23wechat_redirect">（进阶版）有了四步解题法模板，再也不害怕动态规划！</a> </p><p> <a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486936%26idx%3D1%26sn%3D27ec53c1463384edeeee138db23c1c7d%26chksm%3Dfa0e6259cd79eb4f240786ad7c00dcd0ed39ad68fd62b72e15d6a8ee0ecbd26b6250ab3b1171%26scene%3D21%23wechat_redirect">（再进阶版）有了四步解题法模板，再也不害怕动态规划！</a> </p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247484350%26idx%3D1%26sn%3Dfc88aa125f5a5269575b4c4d83774f41%26chksm%3Dfa0e6c3fcd79e5297257a05b8c75898b4059b1193956c702ff5ef3f2d8d46432bb7484bf6428%26scene%3D21%23wechat_redirect">看动画轻松理解「递归」与「动态规划」</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247485288%26idx%3D1%26sn%3Dfd043fc723f38bcaecc90d9945981f8a%26chksm%3Dfa0e68e9cd79e1ffd965205bb06b1731539bf2e0bbc5991664f5d1d9721b346ec08c85bb9042%26scene%3D21%23wechat_redirect">浅谈什么是动态规划以及相关的「股票」算法题</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247485994%26idx%3D2%26sn%3D485d2051d228eeb96403f79a30aa1bf1%26chksm%3Dfa0e65abcd79ecbd04d81c803504896b1a41b0a7c131cf475f4e6c0b7d4295920bc2edcd9964%26scene%3D21%23wechat_redirect">深度解析「正则表达式匹配」：从暴力解法到动态规划</a></p><p> 用一句话解释动态规划就是 “<strong>记住你之前做过的事</strong>”，如果更准确些，其实是 “<strong>记住你之前得到的答案</strong>”。 </p><p>一般解决动态规划问题，分为四个步骤，分别是</p><ul><li>问题拆解，找到问题之间的具体联系</li><li>状态定义</li><li>递推方程推导</li><li>实现</li></ul><hr><h4 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h4><p> <a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247485228%26idx%3D1%26sn%3D9f48aee51dcb2b98b56b1827cc658439%26chksm%3Dfa0e68adcd79e1bbcd0183ef30a79ede4e46c5835ce05ee6644169c3cc9454073019ccd85d3d%26scene%3D21%23wechat_redirect">浅谈什么是分治算法</a> </p><p> 分治法在每一层递归上都有三个步骤：<br>  （1）分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题。<br>  （2）求解：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题。<br>  （3）合并：将各个子问题的解合并为原问题的解。 </p><p>作者：程序员吴师兄呀</p><h3 id="3、排序算法"><a href="#3、排序算法" class="headerlink" title="3、排序算法"></a><strong>3、排序算法</strong></h3><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486087%26idx%3D1%26sn%3Da26e271bdb5444a032bb6cfbdaf03159%26chksm%3Dfa0e6506cd79ec10c8a61669f77ac8fa0699c0a918ea9ee1e78933597b2b09d3a0dd3b2184ee%26scene%3D21%23wechat_redirect">「多图警告」手撕排序算法 – iOS进阶必备</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247484184%26idx%3D1%26sn%3D62965b401aa42107b3c17d1d8ea17454%26chksm%3Dfa0e6c99cd79e58f298e9026f677f912bd8c8e55edb48fc509b2b5834f05e529a9b47d59d202%26scene%3D21%23wechat_redirect">十大经典排序算法动画与解析，看我就够了！（配代码完全版）</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247485556%26idx%3D1%26sn%3D344738dd74b211e091f8f3477bdf91ee%26chksm%3Dfa0e67f5cd79eee3139d4667f3b94fa9618067efc45a797b69b41105a7f313654d0e86949607%26scene%3D21%23wechat_redirect">这或许是东半球分析十大排序算法最好的一篇文章</a></p><h3 id="4、搜索"><a href="#4、搜索" class="headerlink" title="4、搜索"></a><strong>4、搜索</strong></h3><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247485046%26idx%3D1%26sn%3D76bec8ca58817986ebedd6a2e2421725%26chksm%3Dfa0e69f7cd79e0e14d9a5db76633fc66edb7d93955c845586c14e710174897d06e96bdd1e24d%26scene%3D21%23wechat_redirect">几道和「广度优先搜索」有关的算法面试题</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486604%26idx%3D2%26sn%3D631166bb9d6c55ec291a4711e5c39660%26chksm%3Dfa0e630dcd79ea1b6bc2487986544ff732f52c6086b25400f107975208485cd9d752a6f1a828%26scene%3D21%23wechat_redirect">初识广度优先搜索与解题套路</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247485611%26idx%3D2%26sn%3D1145130c2b71c7a4e947e5497b65a8db%26chksm%3Dfa0e672acd79ee3cc189f41fb867359db72b817270064e73977577b948459e74cca42aee2941%26scene%3D21%23wechat_redirect">从简单二叉树问题重新来看深度优先搜索</a></p><h3 id="5、查找"><a href="#5、查找" class="headerlink" title="5、查找"></a><strong>5、查找</strong></h3><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247485570%26idx%3D2%26sn%3D7a4e2635aafcf1c9bd01642f6cedd409%26chksm%3Dfa0e6703cd79ee15f692f31c488aac6787a08ffea2ffe457a037310df355c1e6a810919333e4%26scene%3D21%23wechat_redirect">二分查找算法详解</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486128%26idx%3D1%26sn%3Da3b15488968660b194df938c7b7795ef%26chksm%3Dfa0e6531cd79ec273c7330ec2d8d55463243a101d31647750c4b00c9b4020723f6a7dcf2fba3%26scene%3D21%23wechat_redirect">一网打尽！二分查找解题模版与题型全面解析</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247485240%26idx%3D1%26sn%3Dfbccc747b2e8558c6478171709005ff9%26chksm%3Dfa0e68b9cd79e1af5ab68d42adea0b24c7d4867069091df9e95b6f20ab57b69c4e38994a36be%26scene%3D21%23wechat_redirect">面试官，我会写二分查找法！对，没有 bug 的那种！</a></p><h3 id="6、字符串匹配"><a href="#6、字符串匹配" class="headerlink" title="6、字符串匹配"></a><strong>6、字符串匹配</strong></h3><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486150%26idx%3D1%26sn%3D9e9f8c35805c66132005cb634ef18171%26chksm%3Dfa0e6547cd79ec51529d0510f18161b65e54826231fae025d2cfbbd4f8a9656460f5b2d424b3%26scene%3D21%23wechat_redirect">动画：BM 算法中的坏字符规则与好后缀规则</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247485939%26idx%3D1%26sn%3Db25f39b5644da92c4047bbbd9936f73c%26chksm%3Dfa0e6672cd79ef64dda0a21e23c2817edf4a64cbb75b9bed328d6519c6cd4fef36d03a4cb309%26scene%3D21%23wechat_redirect">动画：七分钟理解什么是KMP算法</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247485906%26idx%3D1%26sn%3Df00a07cbca83d345cbacc327e335de2d%26chksm%3Dfa0e6653cd79ef45a9566cd8ea947d122cfde8e1c9459332e4d7d04f06644fc7a6e81da7ee10%26scene%3D21%23wechat_redirect">动画：什么是 BF 算法 ？</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486490%26idx%3D3%26sn%3D35ba410818207a1bef83d6578f4b332c%26chksm%3Dfa0e639bcd79ea8dff1141a8729cf4b1243d23ac276652a58fc23d7b6b2ce01ca2666feab293%26scene%3D21%23wechat_redirect">动态规划之 KMP 算法详解（配代码版）</a></p><h3 id="7、线性表"><a href="#7、线性表" class="headerlink" title="7、线性表"></a><strong>7、线性表</strong></h3><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486537%26idx%3D3%26sn%3D0419423daea576756eac87d9f2e55e6c%26chksm%3Dfa0e63c8cd79eade3fd20b61ceb8ca8288944b177f96327ae8768894610d0d4c0a819560c7a1%26scene%3D21%23wechat_redirect">如何高效对有序数组/链表去重？</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486816%26idx%3D2%26sn%3D29b73073022e3a2b98477fd2f29c8236%26chksm%3Dfa0e62e1cd79ebf790c2a25035fddaf47059758a1e0dbccbc233ee7be364e2ca89711007b1a7%26scene%3D21%23wechat_redirect">超详细！详解一道高频算法题：数组中的第 K 个最大元素</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486581%26idx%3D1%26sn%3D0ed7d74ba7ebf427c58ade56bc4f8f68%26chksm%3Dfa0e63f4cd79eae225bc995a4a8a31f0bed758094589ab1a2933866a3bd88ff44372dcb0ec11%26scene%3D21%23wechat_redirect">一道简单的数组遍历题，加上四个条件后感觉无从下手</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486473%26idx%3D3%26sn%3D06bf5f9c17cd3cb328934acc698b0ec3%26chksm%3Dfa0e6388cd79ea9e30c67dd2e5251056d860ba45e1fcbbcd4524573072305396d06629312c91%26scene%3D21%23wechat_redirect">数组特性的妙用！如何找到「缺失的第一个正数」</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247484783%26idx%3D2%26sn%3D475615f9be34e65319b7f12fa5893010%26chksm%3Dfa0e6aeecd79e3f8c78e092feeda4908459326329e31f8457c1d33ea13794c97165a2405056b%26scene%3D21%23wechat_redirect">剑指 offer 第一题：二维数组中的查找</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486327%26idx%3D2%26sn%3D12898a14bb5eca6508c9edb785b79d18%26chksm%3Dfa0e64f6cd79ede0cd08cf2059bc848b879918c2507b80d785409b49a9dbb6909b64dd146ff5%26scene%3D21%23wechat_redirect">动画：什么是单调栈？</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247484148%26idx%3D1%26sn%3D51a464877fc6c78b6766b57aeaeddfa5%26chksm%3Dfa0e6d75cd79e463d37a7a3d40d9fed9838efa03f448d82ee4b18b1ce0d93a84cfe75b2cdbeb%26scene%3D21%23wechat_redirect">在数据结构中穿针引线：链表实现栈和队列</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247484111%26idx%3D1%26sn%3D2d3fe1bec05df212f17ed20d4924f492%26chksm%3Dfa0e6d4ecd79e458c800d028f43d21994021738a85aa7e4ca659a8530e1c5e3fd14b9ef0c5ea%26scene%3D21%23wechat_redirect">从简单的线性数据结构开始：栈与队列</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486736%26idx%3D4%26sn%3Daca78aa0b0e92348528563afb271637f%26chksm%3Dfa0e6291cd79eb87990cb6a5cc05477a62f379284ac09841d063bfaf5ca53224f85c7e15f0e7%26scene%3D21%23wechat_redirect">五分钟学算法小知识：用栈实现队列/用队列实现栈</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247484846%26idx%3D2%26sn%3De508da06e9f7a0b3d00db5415d7ce622%26chksm%3Dfa0e6a2fcd79e3397fe8083f9493ae639f47c9448ac2a0026026494d098c47ecc6e08f1f8e28%26scene%3D21%23wechat_redirect">几道和「堆栈、队列」有关的面试算法题</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486890%26idx%3D2%26sn%3D8ce4eb1d150a5333942ed86350d4eed3%26chksm%3Dfa0e622bcd79eb3d2ac14d76351400253f8ab2cf908fc16939fc9ce58cbc0be24eb1197ddd8d%26scene%3D21%23wechat_redirect">超详细！图解「合并 K 个排序链表」</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486627%26idx%3D4%26sn%3Dda41bd8a4c3509a7f688613a9a95ccff%26chksm%3Dfa0e6322cd79ea3401597ca675834a4fd22f9c0abeea814657c9bcc4fe9781be5ef4fe8a1c57%26scene%3D21%23wechat_redirect">动画：面试如何轻松手写链表？</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247485110%26idx%3D1%26sn%3D93950a8445ce1d45d0633093b9127240%26chksm%3Dfa0e6937cd79e021003c333a19bebd00cddec60472cadb8dc66629523eee9c66c5eaef6c8798%26scene%3D21%23wechat_redirect">LeetCode 上最难的链表算法题，没有之一！</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247484830%26idx%3D1%26sn%3D9d24fc787da4b49b82ac01c7f8de257b%26chksm%3Dfa0e6a1fcd79e309a2e7f3e09ec9913a55f1c077287c907f13528578b7785831a2effb3104e0%26scene%3D21%23wechat_redirect">链表算法面试问题？看我就够了！</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247484322%26idx%3D1%26sn%3D7a12bcef22dda2c97cffe8ad4d55ea9d%26chksm%3Dfa0e6c23cd79e53514cc85fb0a2bae55ab5965049eabf633ca537c0ecba1309db80119661b05%26scene%3D21%23wechat_redirect">看动画轻松理解「链表」实现「LRU缓存淘汰算法」</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247484127%26idx%3D1%26sn%3Dd681b847e69e3a7fd729e3b480731aa1%26chksm%3Dfa0e6d5ecd79e4487f4427433682a9d7dc2d115224c2e3b5b10ca1dd37781f1201013cbd6584%26scene%3D21%23wechat_redirect">从简单的线性数据结构开始：穿针引线的链表（一）</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247484148%26idx%3D1%26sn%3D51a464877fc6c78b6766b57aeaeddfa5%26chksm%3Dfa0e6d75cd79e463d37a7a3d40d9fed9838efa03f448d82ee4b18b1ce0d93a84cfe75b2cdbeb%26scene%3D21%23wechat_redirect">在数据结构中穿针引线：链表实现栈和队列</a></p><h3 id="8、散列表"><a href="#8、散列表" class="headerlink" title="8、散列表"></a><strong>8、散列表</strong></h3><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486499%26idx%3D4%26sn%3D7c9aee095ec972b1af842788c545d309%26chksm%3Dfa0e63a2cd79eab47649274533063bea75550d97aa55f60856f02037bc2f6b657270630f214b%26scene%3D21%23wechat_redirect">五分钟速读：什么是散列表（哈希表）？</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247485591%26idx%3D1%26sn%3D54cde6fab4f11a0478f0c6447069d47c%26chksm%3Dfa0e6716cd79ee00e3502116a4f2999ee9648b99999317d450d9d6ee8ebef8cf4d39f2f79372%26scene%3D21%23wechat_redirect">什么是哈希洪水攻击（Hash-Flooding Attack）？</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247484977%26idx%3D1%26sn%3Df4a6148480555e3cca83231ac1df8d02%26chksm%3Dfa0e69b0cd79e0a686e31c547fc783eb9663d9fe19cc95ecd524e9f8f7e0d4a168945f8755e5%26scene%3D21%23wechat_redirect">几道和散列（哈希）表有关的面试题</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486559%26idx%3D2%26sn%3Dbd9e3575882181e31e33f0a0094376db%26chksm%3Dfa0e63decd79eac8adc455059de6309a510951461496cc5ee3444e3675a0d5ffb94f2745b003%26scene%3D21%23wechat_redirect">如何判断一个元素在亿级数据中是否存在？</a></p><h3 id="9、树"><a href="#9、树" class="headerlink" title="9、树"></a><strong>9、树</strong></h3><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486365%26idx%3D3%26sn%3D0c9dd00f69159cfe2ad07899eaadb16f%26chksm%3Dfa0e641ccd79ed0a7b327fe338ff589499c0115048af185cc5d327ab6f4f8d85aec26f2de331%26scene%3D21%23wechat_redirect">面试前准备：二叉树高频面试题和答案</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247484198%26idx%3D1%26sn%3D7c6900bbb6798dc3cc5f10e820ca25a3%26chksm%3Dfa0e6ca7cd79e5b11dc1951324039257def9dd83402840e62201ef3dd4e60dcd297314fed34a%26scene%3D21%23wechat_redirect">懵逼树上懵逼果：学习二分搜索树</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486350%26idx%3D3%26sn%3Df847d84a0c2553d2854b37b6202cb923%26chksm%3Dfa0e640fcd79ed19006e12d9d4e330fca44db451413a5870de3758515be60f387d43a1f80ef1%26scene%3D21%23wechat_redirect">LeetCode 二叉树问题小总结</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247485611%26idx%3D2%26sn%3D1145130c2b71c7a4e947e5497b65a8db%26chksm%3Dfa0e672acd79ee3cc189f41fb867359db72b817270064e73977577b948459e74cca42aee2941%26scene%3D21%23wechat_redirect">从简单二叉树问题重新来看深度优先搜索</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247484985%26idx%3D1%26sn%3D93343d355abf36c77a361c9931cbe2d1%26chksm%3Dfa0e69b8cd79e0ae1e6b57665a456da5f421cc92fe6934337f1eb1e18c3fd6a3c1adc8ca88c2%26scene%3D21%23wechat_redirect">几道和「二叉树」有关的算法面试题</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247484608%26idx%3D1%26sn%3D68b96e6e65a048da54177b6e95b02676%26chksm%3Dfa0e6b41cd79e257daa1f276e0921ed4a060c9caf964e4131f68010ae2a9b8211f56af866fed%26scene%3D21%23wechat_redirect">详解什么是平衡二叉树（AVL）（修订补充版）</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486680%26idx%3D1%26sn%3Dfec210ee18e81448e9e5245be7ebe03f%26chksm%3Dfa0e6359cd79ea4f1f138d979c10160f3c62cca7fa36e38f896ef4434983cff5dd544ccf0799%26scene%3D21%23wechat_redirect">【面试现场】为什么 MySQL 数据库要用B+树存储索引？</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486664%26idx%3D2%26sn%3D878d37938cc9a4f5c9035f4c58f3d0f5%26chksm%3Dfa0e6349cd79ea5fe8e9a1d04e21c59c04420d7a81a43d3a142e9da13378d5cbbf4196a493e2%26scene%3D21%23wechat_redirect">字典树概念与题型解析</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247486359%26idx%3D2%26sn%3Ddaf49d25a38e1440d932c92ca618de09%26chksm%3Dfa0e6416cd79ed000dadbda01d801977e410e505ea91331e42e7ed2990eda12272441ee9bb75%26scene%3D21%23wechat_redirect">面试官：为什么 MySQL 的索引要使用 B+ 树，而不是其它树？比如 B 树？</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247485383%26idx%3D2%26sn%3D826b59c9d92f6462a8eaf9586827473e%26chksm%3Dfa0e6846cd79e1500858655cbe6eadfd056546a7c4eeaabb00dfe851d7efe3867779f2c7850f%26scene%3D21%23wechat_redirect">心里没点 B 树。。。</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247485134%26idx%3D2%26sn%3D925724b0019b051796f98a8454df69f5%26chksm%3Dfa0e694fcd79e059fd811018b8ed44d5cd0f8587d6645766e4bf44bb66c69c309c87f4770ada%26scene%3D21%23wechat_redirect">数据结构与算法——最小生成树</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247484944%26idx%3D1%26sn%3D33e3496681854c0e55e59e900949a7a0%26chksm%3Dfa0e6991cd79e08777c28499abc1a231e8e52b50d72eb332cecbe3e9bff4add38ef715d85d54%26scene%3D21%23wechat_redirect">植树节，程序猿种的那些树</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247484706%26idx%3D1%26sn%3D645713dba123f71a014dcc1204083293%26chksm%3Dfa0e6aa3cd79e3b5b2ebf903a52bd90f6728e9def50da80eb0ee5aa3aa9f6e940c9822217fe2%26scene%3D21%23wechat_redirect">数据结构与算法——2-3-4树</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247484676%26idx%3D1%26sn%3D95da6d2ab65302da195a75bc3122ea3b%26chksm%3Dfa0e6a85cd79e3936b6280a3f946dfd50fde3e46cfccd68f8dff2568d6dbb9c0e4b185f007e7%26scene%3D21%23wechat_redirect">数据结构与算法——2-3树</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247484383%26idx%3D1%26sn%3Dbc555e97f42b56aa8697ec71d92dc79d%26chksm%3Dfa0e6c5ecd79e548a10d493979b58cb3530eab4c83533d09c463da67d870a24a1acddef4dad4%26scene%3D21%23wechat_redirect">看动画轻松理解「Trie树」</a></p><h3 id="10、图"><a href="#10、图" class="headerlink" title="10、图"></a><strong>10、图</strong></h3><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247485258%26idx%3D1%26sn%3D96b3a50e6957cb6a5ad78fd2a6f66a14%26chksm%3Dfa0e68cbcd79e1dd75d4f267c3bf59d0d0b9360497dd784147b4cb6b9493f72a47ed50ce0267%26scene%3D21%23wechat_redirect">浅谈什么是图拓扑排序</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247485033%26idx%3D1%26sn%3D6992fd815538047634044b69dfaad7c4%26chksm%3Dfa0e69e8cd79e0febdf3692df969b0c207ceeab79fb7b7b0ae0334e41197a56e1b5f11c3b364%26scene%3D21%23wechat_redirect">数据结构与算法——图论基础与图存储结构</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247485076%26idx%3D1%26sn%3Dba747d1efd4c009da83681a6bb4ff549%26chksm%3Dfa0e6915cd79e003249e9ee045d09a174b0e5aff2a6ecd807e10fd01bfbc1a37da688eb51637%26scene%3D21%23wechat_redirect">数据结构与算法：三十张图弄懂「图的两种遍历方式」</a></p><p><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyNjQxNjYyMg%3D%3D%26mid%3D2247485151%26idx%3D1%26sn%3D619590d77d933d06679c3bb8d72490eb%26chksm%3Dfa0e695ecd79e048ed993c28d3ed5779a9d0fd03c342009fabc1cddf735a4407f239103ff28c%26scene%3D21%23wechat_redirect">数据结构与算法——图最短路径</a></p><hr><p>【转】<a href="https://www.zhihu.com/question/23148377/answer/907915556" target="_blank" rel="noopener">知乎</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本算法思想&quot;&gt;&lt;a href=&quot;#基本算法思想&quot; class=&quot;headerlink&quot; title=&quot;基本算法思想&quot;&gt;&lt;/a&gt;基本算法思想&lt;/h2&gt;&lt;h4 id=&quot;贪心算法&quot;&gt;&lt;a href=&quot;#贪心算法&quot; class=&quot;headerlink&quot; title=&quot;贪
      
    
    </summary>
    
    
      <category term="算法" scheme="https://goolory.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="https://goolory.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>OLSR数据包格式与转发</title>
    <link href="https://goolory.github.io/2019/11/22/OLSR%E6%95%B0%E6%8D%AE%E5%8C%85%E6%A0%BC%E5%BC%8F%E4%B8%8E%E8%BD%AC%E5%8F%91/"/>
    <id>https://goolory.github.io/2019/11/22/OLSR%E6%95%B0%E6%8D%AE%E5%8C%85%E6%A0%BC%E5%BC%8F%E4%B8%8E%E8%BD%AC%E5%8F%91/</id>
    <published>2019-11-22T15:08:37.000Z</published>
    <updated>2020-03-17T03:05:56.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据包格式与转发"><a href="#数据包格式与转发" class="headerlink" title="数据包格式与转发"></a>数据包格式与转发</h2><p>OLSR使用与协议相关的所有数据的统一数据包格式进行通信。这样做的目的是在不破坏向后兼容性的情况下促进协议的可扩展性。这也提供了一种简单的方式，将不同“类型”的信息承载到单个传输中，从而为给定的实现优化利用网络提供的最大帧大小。这些数据包被嵌入UDP数据报在网络上传输。本文档使用IPv4地址。关于IPv6的考虑在第17节中给出。</p><p>每个包封装一个或多个消息。这些消息共享一个公共的头格式，这使节点能够正确地接受和(如果适用的话)重新传输未知类型的消息。</p><p>消息可以被淹没到整个网络中，或者可以将淹没限制在距离消息始发者直径(以跳数表示)以内的节点上。因此，将消息传递给节点的邻居只是洪泛的一个特例。当淹没任何控制消息时，重复的重发将在本地被消除(即，每个节点都维护一个重复的集合，以防止发送相同的OLSR控制消息两次)，并通过使用MPRs在整个网络中最小化。</p><p>此外，节点可以检查消息的标头，以获得关于到消息发送者的距离(以跳数表示)的信息。这种特性在某些情况下可能有用，例如，来自存储在节点上的接收控制消息的时间信息取决于到发送方的距离。</p><hr><h4 id="数据包格式"><a href="#数据包格式" class="headerlink" title="数据包格式"></a>数据包格式</h4><p>OLSR中任何包的基本布局如下(省略IP和UDP报头)：</p><p><img src="/2019/11/22/OLSR%E6%95%B0%E6%8D%AE%E5%8C%85%E6%A0%BC%E5%BC%8F%E4%B8%8E%E8%BD%AC%E5%8F%91/1572351481258.png" alt="1572351481258"></p><p><strong>Packet Length:</strong>数据包的长度(以字节为单位)</p><p><strong>Packet Sequence Number</strong>：数据包序列号</p><p><strong>Message Type</strong></p><p><strong>Vtime:</strong> 此字段指示在接收后多长时间内节点必须认为消息中包含的信息是有效的，除非接收到信息的最新更新。有效时间由其尾数(Vtime字段的四个最高位)和指数(Vtime字段的四个最低位)表示。换句话说</p><p><img src="/2019/11/22/OLSR%E6%95%B0%E6%8D%AE%E5%8C%85%E6%A0%BC%E5%BC%8F%E4%B8%8E%E8%BD%AC%E5%8F%91/1572351839640.png" alt="1572351839640"></p><p>其中a为Vtime字段的四个最高位代表的整数，b为Vtime字段的四个最低位代表的整数。第18节规定了比例因子C的建议值。</p><p><strong>Message Size:</strong>这将给出此消息的大小，以字节为单位进行计数，并从“消息类型”字段的开始到下一个“消息类型”字段的开始(或者，如果没有以下消息，则直到数据包结束)进行测量。</p><p><strong>原地址（Originator Address）：</strong>此字段包含最初生成此消息的节点的主地址。此字段不应与来自IP报头的源地址混淆，后者每次都更改为重新传输此消息的中间接口的地址。在重发中，发起人地址字段必须“永远”不变。</p><p><strong>生存时间（Time To Live）</strong>：此字段包含要传输的消息的最大跳数。在重新传输消息之前，生存时间必须减少1。当节点接收到时间为0或1的消息时，在任何情况下都不能重新传输该消息。通常，节点不会接收TTL为0的消息。</p><p><strong>跳数（Hop Count）</strong>：此字段包含消息已达到的跳数。在重新传输消息之前，跳数必须增加1。</p><hr><h4 id="包处理和消息泛滥"><a href="#包处理和消息泛滥" class="headerlink" title="包处理和消息泛滥"></a>包处理和消息泛滥</h4><p>在接收到基本数据包后，节点检查每个“消息头”。根据“消息类型”字段的值，节点可以确定消息的命运。一个节点可以多次接收相同的消息。因此，为了避免对一些已经接收和处理的消息进行重新处理，每个节点维护一个重复集。在这个集合中，节点记录关于最近接收的消息的信息，避免对消息进行重复处理。对于这样的消息，节点记录一个“重复元组”(D_addr、D_seq_num、d_re、D_iface_list、D_time)，其中D_addr是消息的发起者地址，D_seq_num是消息的消息序列号，d_retransmission是一个布尔值，指示消息是否已被发送</p><p>已经重新传输的D_iface_list是接收到消息的接口的地址列表，D_time指定元组过期和<em>必须</em>删除的时间</p><p><strong>因此，在接收到基本数据包时，节点必须为每个封装的消息执行以下任务：</strong></p><ol><li><p>如果数据包不包含任何消息(即，数据包长度小于或等于数据包报头的大小)，则必须悄悄地丢弃数据包。对于IPv4地址，这意味着当数据包长度小于16时，必须静静地丢弃数据包。</p></li><li><p>如果消息的生存时间小于或等于“0”(0)，或者消息是由接收节点发送的(即，消息的发起者地址为接收节点的主地址):消息必须被静默丢弃。</p></li><li><p>处理条件</p><p>​    若：</p><p>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D_addr == Originator Address, AND</span><br><span class="line">D_seq_num == Message Sequence Number</span><br></pre></td></tr></table></figure><p>表示信息早已被处理，无需再处理</p></li></ol><hr><h4 id="默认转发算法"><a href="#默认转发算法" class="headerlink" title="默认转发算法"></a>默认转发算法</h4><ol><li><p>如果未检测到消息的发送方接口地址位于节点的对称1跳邻域内，则转发算法必须在此静默停止(且不能转发消息)。</p></li><li><p>若：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D_addr == Originator Address, AND</span><br><span class="line">D_seq_num == Message Sequence Number</span><br></pre></td></tr></table></figure><p>已收到，将进一步考虑转发消息，当且仅当;</p><blockquote><p>D_retransmitted is false, AND 接收到消息的接口的地址不在D_iface_list地址中</p></blockquote></li><li><p>否则，如果这样的条目不存在，则进一步考虑转发消息。</p></li><li><p>如果发送方接口地址是该节点的MPR选择器的接口地址，并且消息的存活时间大于’1’，则必须重新传输消息(如后面的步骤6到8所述)。</p></li><li><p>如果重复集中存在具有相同发起者地址和相同消息序列号的项，则按以下方式更新该项:</p></li><li><p>消息的TTL减少了1。</p></li><li><p>消息的跃点计数增加1</p></li><li><p>消息在所有接口上广播(注意:消息头的其余字段应该保持不变)。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据包格式与转发&quot;&gt;&lt;a href=&quot;#数据包格式与转发&quot; class=&quot;headerlink&quot; title=&quot;数据包格式与转发&quot;&gt;&lt;/a&gt;数据包格式与转发&lt;/h2&gt;&lt;p&gt;OLSR使用与协议相关的所有数据的统一数据包格式进行通信。这样做的目的是在不破坏向后兼容性的
      
    
    </summary>
    
    
      <category term="MANET" scheme="https://goolory.github.io/categories/MANET/"/>
    
    
      <category term="OLSR" scheme="https://goolory.github.io/tags/OLSR/"/>
    
  </entry>
  
  <entry>
    <title>OLSR路由协概述</title>
    <link href="https://goolory.github.io/2019/11/22/OLSR%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0/"/>
    <id>https://goolory.github.io/2019/11/22/OLSR%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0/</id>
    <published>2019-11-22T15:03:40.000Z</published>
    <updated>2020-03-17T03:12:39.954Z</updated>
    
    <content type="html"><![CDATA[<p>OLSR是一种用于移动自组网[1]、[2]的主动路由协议。它非常适合大型和密集的移动网络，因为使用MPRs实现的优化在这种情况下工作得很好。与经典的链路状态算法相比，网络越大、越密集，就可以实现越多的优化。</p><p>OLSR使用逐跳路由，即，每个节点使用其本地信息来路由包。OLSR非常适合于网络，在网络中，较大的节点集之间的流量是随机的、零星的，而不是几乎完全只在较小的特定节点集之间。作为一种主动协议，OLSR也适用于通信对随时间变化的场景:在这种情况下不会生成额外的控制流量，因为所有已知目的地都始终维护路由。</p><hr><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>OLSR是一种用于移动自组织网络的主动路由协议。该协议继承了链路状态算法的稳定性，并且由于其主动性，在需要的时候可以立即使用路由。OLSR是对经典链路状态协议的优化，为移动自组织网络量身定制。</p><p>OLSR<strong>只使用选定的节点(称为MPRs)来重新传输控制消息</strong>，从而<strong>最小化控制流量泛滥带来的开销</strong>。这种<u>技术大大减少了将消息发送到网络中所有节点所需的重发次数</u>。其次，OLSR只需要淹没部分链路状态即可提供最短路径路径。所需的链路状态信息的最小集合是，所有选择为MPRs的节点必须将链路声明到它们的MPR选择器。额外的拓扑信息，如果存在，可以利用，例如，为冗余的目的</p><p>通过减少周期性控制消息传输的最大时间间隔，OLSR可以优化对拓扑变化的响应性。此外，由于OLSR持续维护到网络中所有目的地的路由，所以该协议对于流量模式非常有利，在这种模式中，一个大的节点子集与另一个大的节点子集通信，并且[源、目的]对随着时间而变化。该协议特别适用于大型和密集的网络，因为使用MPRs进行的优化在这种情况下工作得很好。与经典的链路状态算法相比，网络越大、越密集，就可以实现越多的优化。</p><p>OLSR被<strong>设计成以完全分布式的方式工作</strong>，<strong>不依赖于任何中心实体</strong>。该协议不需要可靠的控制消息传输:每个节点定期发送控制消息，因此可以<strong>承受一些此类消息的合理丢失</strong>。这种损失经常发生在无线电网络中，由于碰撞或其他传输问题。</p><p>而且，OLSR<strong>不需要按顺序传递消息</strong>。每个控制消息包含一个序列号，序列号为每个消息递增。因此，如果需要，控制消息的接收者可以很容易地识别哪些信息是最近的—即使消息在传输过程中被重新排序。</p><p>此外，OLSR还支持协议扩展，如睡眠模式操作、多路路由等。这些扩展可以作为协议的补充而引入，而不会破坏与早期版本的向后兼容性</p><p>OLSR不需要对IP包的格式进行任何更改。因此，任何现有的IP堆栈都可以这样使用:<strong>协议仅与路由表管理交互。</strong></p><hr><h4 id="MPR"><a href="#MPR" class="headerlink" title="MPR"></a>MPR</h4><p><strong>多点中继的思想</strong>是通过<em>减少同一区域的冗余重传来最小化网络中泛滥消息的开销</em>。网络中的每个节点在其对称的1跳邻居中选择一组节点，这些节点可以重新传输其消息。这组选定的邻居节点称为该节点的“多点中继”(MPR)集。节点N的邻居(不在其MPR集中)接收和处理广播消息，但不转发从节点N接收到的广播消息。</p><p><u>每个节点从它的1跳对称邻居中选择它的MPR集</u>。选择这个集合时，<strong>它覆盖(在无线电范围方面)所有对称的严格2跳节点</strong>。N的MPR集合，记作MPR(N)，是N的对称1跳邻域的任意子集，满足以下条件:N的对称严格2跳邻域内的每个节点必须有一个指向MPR(N)的对称链接。MPR集越小，路由协议导致的控制流量开销越小。[2]给出了MPR选择算法的分析和实例。</p><p><strong>每个节点维护选择它作为MPR的邻居集的信息</strong>。这个集合称为节点的“多点中继选择集合”(MPR选择集合)。节点从邻居定期接收的HELLO消息中获取此信息。</p><p>从节点N的MPR选择器中发出的广播消息，打算在整个网络中传播，如果节点N还没有接收到广播消息，则假定该广播消息由节点N重新发送。这个集合可以随时间改变(即，当节点选择另一个MPR-set时)，并由其HELLO消息中的选择器节点指示。</p><hr><h4 id="协议功能"><a href="#协议功能" class="headerlink" title="协议功能"></a>协议功能</h4><p>本节概述总体协议的功能。OLSR被模块化为功能的“核心”和一组辅助功能，这些功能是协议操作所必需的。</p><p>核心本身指定了能够在独立的MANET中提供路由的协议。每个辅助功能提供额外的功能，这些功能可能适用于特定的场景，例如，当一个节点提供MANET和另一个路由域之间的连接时。所有辅助功能都是兼容的，只要辅助功能的任何(子)集可以用核心实现即可。此外，该协议允许异构节点，即，实现辅助功能的不同子集的节点在网络中共存。将OLSR的功能划分为核心功能和一组辅助功能的目的是提供一个简单且易于理解的协议，并提供一种只在需要特定附加功能时增加复杂性的方法。</p><h5 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h5><p>OLSR的核心功能指定了节点的行为，配备了参与MANET的OLSR接口，并运行OLSR作为路由协议。这包括OLSR协议消息的通用规范及其通过网络的传输，以及<strong>链路感知</strong>、<strong>拓扑扩散</strong>和<strong>路由计算</strong>。</p><p>具体来说，核心是由以下组件组成的：</p><p><strong>分组格式和转发：</strong></p><p>​    包格式的通用规范和优化的洪泛机制是所有OLSR控制流量的传输机制</p><p><strong>链路感知</strong></p><p>​    链接感知是通过在接口上定期发送HELLO消息来实现的，通过这些接口检查连接性。为每个接口生成一个单独的HELLO消息，并根据第7节中的规定发出相应的HELLO消息。</p><p>​    由链路感应产生的是一个本地链路集，描述“本地接口”和“远程接口”之间的链路。，邻居节点上的接口。</p><p>​    如果链路层提供了足够的信息，则可以利用这些信息来填充本地链路集，而不是进行HELLO消息交换。</p><p><strong>邻居检测</strong></p><p>对于只有单个接口节点的网络，节点可以直接从作为链路感知的一部分交换的信息中扣除邻居集:根据定义，单个接口节点的“主地址”是该节点上唯一接口的地址。在具有多个接口节点的网络中，需要额外的信息才能将接口地址映射到主地址(从而映射到节点)。这些附加信息是通过第5节中描述的多个接口声明(MID)消息获得的。</p><p><strong>MPR选择和MPR信号</strong></p><p>MPR选择的目的是让一个节点选择它的邻居的一个子集，这样一个广播消息，由这些被选择的邻居重新传输，将被所有节点接收2跳。计算节点的MPR集时，对于每个接口，它都满足这个条件。执行此计算所需的信息是通过定期交换HELLO消息获得的，如第6节所述。MPR选择程序详见第8.3节。MPR信号是根据第6节的规定提供的。</p><p><strong>拓扑控制消息扩散</strong></p><p>拓扑控制消息是分散的，其目的是为网络中的每个节点提供足够的链路状态信息，以允许路由计算。拓扑控制消息在与第9节的规定相对应的情况下被扩散。</p><p><strong>路由计算</strong></p><hr><h2 id="OLSR协议术语"><a href="#OLSR协议术语" class="headerlink" title="OLSR协议术语"></a>OLSR协议术语</h2><p><strong>node:</strong>一种MANET路由器</p><p><strong>OLSR接口(OLSR interface):</strong>参与运行OLSR的MANET的网络设备。一个节点可以有多个OLSR接口，每个接口分配一个惟一的IP地址。</p><p><strong>非OLSR接口(non OLSR interface)</strong>:网络设备，不参与运行OLSR的MANET。一个节点可能有几个非OLSR接口(无线和/或有线)。来自这些接口的路由信息可以注入到OLSR路由域。</p><p><strong>单个OLSR接口节点(single OLSR interface node)</strong>:具有单个OLSR接口的节点，参与一个OLSR路由域。</p><p><strong>多个OLSR接口节点(multiple OLSR interface node)</strong></p><p><strong>主地址（main address）：</strong>一个节点的主地址，将在OLSR中用于控制流量，作为该节点发出的所有消息的“始发者地址”。它是节点的一个OLSR接口的地址。单个OLSR接口节点必须使用其唯一OLSR接口的地址作为主地址。多个OLSR接口节点必须选择一个OLSR接口地址作为“主地址”(相当于“路由器ID”或“节点标识符”)。选择哪个地址并不重要，但是节点应该始终使用与其主地址相同的地址。</p><p><strong>邻居节点（neighbor node）</strong></p><p><strong>二跳邻居节点（2-hop neighbor）</strong></p><p><strong>严格2-hop邻居（strict 2-hop neighbor）</strong>：一个2跳邻居，它不是节点本身，也不是节点的邻居，而且是邻居的邻居，其意愿不同于节点的WILL_NEVER。</p><p><strong>multipoint relay (MPR)</strong></p><p><strong>multipoint relay selector (MPR selector, MS)</strong>：选择其1跳邻居节点X作为其多点中继的节点将被称为节点X的多点中继选择器。</p><p><strong>链路（link）</strong>：一个链接是一对OLSR接口(来自两个不同的节点)，它们可以相互监听对方的声音。，其中一个可以接收来自另一个的流量)。当一个节点的一个接口与另一个节点的一个接口有链接时，该节点被称为与另一个节点有链接</p><p><strong>对称链路（symmetric link）</strong></p><p><strong>非对称链路（asymmetric link）</strong></p><p><strong>对称一跳邻居</strong></p><p><strong>对称二跳邻居</strong></p><p><strong>对称严格二跳邻居</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;OLSR是一种用于移动自组网[1]、[2]的主动路由协议。它非常适合大型和密集的移动网络，因为使用MPRs实现的优化在这种情况下工作得很好。与经典的链路状态算法相比，网络越大、越密集，就可以实现越多的优化。&lt;/p&gt;
&lt;p&gt;OLSR使用逐跳路由，即，每个节点使用其本地信息来路
      
    
    </summary>
    
    
      <category term="MANET" scheme="https://goolory.github.io/categories/MANET/"/>
    
    
      <category term="OLSR" scheme="https://goolory.github.io/tags/OLSR/"/>
    
  </entry>
  
  <entry>
    <title>使用nvm管理node_转</title>
    <link href="https://goolory.github.io/2019/11/22/%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86node/"/>
    <id>https://goolory.github.io/2019/11/22/%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86node/</id>
    <published>2019-11-22T14:23:12.000Z</published>
    <updated>2020-03-17T03:12:39.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nvm-–-nodeJS-管理工具"><a href="#nvm-–-nodeJS-管理工具" class="headerlink" title="nvm – nodeJS 管理工具"></a>nvm – nodeJS 管理工具</h2><h4 id="1、安装-nvm-之后最好先删除下已安装的-node-和全局-node-模块："><a href="#1、安装-nvm-之后最好先删除下已安装的-node-和全局-node-模块：" class="headerlink" title="1、安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块："></a>1、安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装</span><br><span class="line">npm ls -g --depth=0</span><br><span class="line"></span><br><span class="line">#删除全局 node_modules 目录</span><br><span class="line">sudo rm -rf /usr/local/lib/node_modules</span><br><span class="line"></span><br><span class="line">#删除 node</span><br><span class="line">sudo rm /usr/local/bin/node</span><br><span class="line"></span><br><span class="line">#删除全局 node 模块注册的软链</span><br><span class="line">cd  /usr/local/bin &amp;&amp; ls -l | grep &quot;../lib/node_modules/&quot; | awk &apos;&#123;print $9&#125;&apos;| xargs rm</span><br></pre></td></tr></table></figure><h4 id="2、安装nvm"><a href="#2、安装nvm" class="headerlink" title="2、安装nvm"></a>2、安装nvm</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash</span><br></pre></td></tr></table></figure><p>最新版本<br><a href="https://github.com/creationix/nvm/blob/master/README.md" target="_blank" rel="noopener">https://github.com/creationix/nvm/blob/master/README.md</a></p><h4 id="3、查看安装"><a href="#3、查看安装" class="headerlink" title="3、查看安装"></a>3、查看安装</h4><p>如出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm: command not found</span><br></pre></td></tr></table></figure><p>则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi .bash_profile</span><br></pre></td></tr></table></figure><p>.bash_profile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure><h4 id="4、使用nvm"><a href="#4、使用nvm" class="headerlink" title="4、使用nvm"></a>4、使用nvm</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nvm install stable # 安装最新稳定版 node，现在是 5.0.0</span><br><span class="line">nvm install 4.2.2 # 安装 4.2.2 版本</span><br><span class="line">nvm install 0.12.7 # 安装 0.12.7 版本</span><br><span class="line"></span><br><span class="line"># 特别说明：以下模块安装仅供演示说明，并非必须安装模块</span><br><span class="line">nvm use 4 # 切换至 4.2.2 版本</span><br><span class="line">npm install -g mz-fis # 安装 mz-fis 模块至全局目录，安装完成的路径是 /Users/&lt;你的用户名&gt;/.nvm/versions/node/v0.12.7/lib/mz-fis</span><br><span class="line">nvm use 0 # 切换至 0.12.7 版本</span><br><span class="line">npm install -g react-native-cli #安装 react-native-cli 模块至全局目录，安装完成的路径是 /Users/&lt;你的用户名&gt;/.nvm/versions/node/v4.2.2/lib/react-native-cli</span><br><span class="line"></span><br><span class="line">nvm alias default 0.12.7 #设置默认 node 版本为 0.12.7</span><br></pre></td></tr></table></figure><h3 id="文章来源"><a href="#文章来源" class="headerlink" title="文章来源"></a>文章来源</h3><p><a href="https://www.jianshu.com/p/04d31f6c22bd" target="_blank" rel="noopener">https://www.jianshu.com/p/04d31f6c22bd</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;nvm-–-nodeJS-管理工具&quot;&gt;&lt;a href=&quot;#nvm-–-nodeJS-管理工具&quot; class=&quot;headerlink&quot; title=&quot;nvm – nodeJS 管理工具&quot;&gt;&lt;/a&gt;nvm – nodeJS 管理工具&lt;/h2&gt;&lt;h4 id=&quot;1、安装-
      
    
    </summary>
    
    
      <category term="工具" scheme="https://goolory.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="node" scheme="https://goolory.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Linux切换Python版本_转</title>
    <link href="https://goolory.github.io/2019/11/22/Linux%E5%88%87%E6%8D%A2Python%E7%89%88%E6%9C%AC/"/>
    <id>https://goolory.github.io/2019/11/22/Linux%E5%88%87%E6%8D%A2Python%E7%89%88%E6%9C%AC/</id>
    <published>2019-11-22T14:20:33.000Z</published>
    <updated>2020-03-17T03:12:39.929Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux-ubuntu18-04-切换python版本"><a href="#Linux-ubuntu18-04-切换python版本" class="headerlink" title="Linux(ubuntu18.04)切换python版本"></a>Linux(ubuntu18.04)切换python版本</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>Ubuntu18.04系统在安装python时会安装两个版本:2.7和3.6．默认情况下系统环境使用的是python2，但是我们有时需要使用python3来作为我们的开发环境，所以需要自由切换python版本．</p><h6 id="python2切换成python3"><a href="#python2切换成python3" class="headerlink" title="python2切换成python3"></a>python2切换成python3</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100</span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 150</span><br></pre></td></tr></table></figure><p>执行上面两句命令即可将2.7版本切换成python3.6版本，想要查看是否切换成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shanlei@shanlei-Lenovo-ideapad-110-15ISK:~$ python --version</span><br><span class="line">Python 3.6.5</span><br><span class="line">shanlei@shanlei-Lenovo-ideapad-110-15ISK:~$</span><br></pre></td></tr></table></figure><h6 id="python3切换成python2"><a href="#python3切换成python2" class="headerlink" title="python3切换成python2"></a>python3切换成python2</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">shanlei@shanlei-Lenovo-ideapad-110-15ISK:~$ sudo update-alternatives --config python</span><br><span class="line">[sudo] shanlei 的密码： </span><br><span class="line">有 2 个候选项可用于替换 python (提供 /usr/bin/python)。</span><br><span class="line"> </span><br><span class="line">  选择       路径            优先级  状态</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">* 0            /usr/bin/python3   150       自动模式</span><br><span class="line">  1            /usr/bin/python2   100       手动模式</span><br><span class="line">  2            /usr/bin/python3   150       手动模式</span><br><span class="line"> </span><br><span class="line">要维持当前值[*]请按&lt;回车键&gt;，或者键入选择的编号：1</span><br><span class="line">update-alternatives: 使用 /usr/bin/python2 来在手动模式中提供 /usr/bin/python (python)</span><br><span class="line">shanlei@shanlei-Lenovo-ideapad-110-15ISK:~$ python --version</span><br><span class="line">Python 2.7.15rc1</span><br></pre></td></tr></table></figure><p>之后我们在切换python版本时就可以使用这个命令键入选择进行切换了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config python</span><br></pre></td></tr></table></figure><h4 id="文章来源"><a href="#文章来源" class="headerlink" title="文章来源"></a>文章来源</h4><p><a href="https://blog.csdn.net/lishanleilixin/article/details/82908423" target="_blank" rel="noopener">Linux(ubuntu18.04)切换python版本</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux-ubuntu18-04-切换python版本&quot;&gt;&lt;a href=&quot;#Linux-ubuntu18-04-切换python版本&quot; class=&quot;headerlink&quot; title=&quot;Linux(ubuntu18.04)切换python版本&quot;&gt;&lt;/a&gt;Li
      
    
    </summary>
    
    
      <category term="运维" scheme="https://goolory.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Linux" scheme="https://goolory.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="https://goolory.github.io/2019/11/22/quickSort/"/>
    <id>https://goolory.github.io/2019/11/22/quickSort/</id>
    <published>2019-11-22T14:06:28.000Z</published>
    <updated>2020-03-17T03:12:39.902Z</updated>
    
    <content type="html"><![CDATA[<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p><h4 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h4><ul><li>从数列中挑出一个元素，称为 “基准”（pivot）；</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ul><p><img src="/2019/11/22/quickSort/quick.gif" alt="image"><br><img src="/2019/11/22/quickSort/quick1.jpg" alt="image"><br><img src="/2019/11/22/quickSort/quick2.jpg" alt="image"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快速排序</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = l; j&lt;r; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[r]) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = a[i];</span><br><span class="line">                a[i] = a[j];</span><br><span class="line">                a[j] = temp;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = a[i];</span><br><span class="line">        a[i] = a[r];</span><br><span class="line">        a[r] = temp;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quick</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> q = quickSort(a, l, r);</span><br><span class="line">            quick(a, l, q-<span class="number">1</span>);</span><br><span class="line">            quick(a, q+<span class="number">1</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>分段<br>排序时以末尾元素为基准，因为这个元素最后一个移动，可以保证基准元素固定，无需去找。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h3&gt;&lt;p&gt;快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部
      
    
    </summary>
    
    
      <category term="算法" scheme="https://goolory.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="https://goolory.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="https://goolory.github.io/2019/11/22/mergeSort/"/>
    <id>https://goolory.github.io/2019/11/22/mergeSort/</id>
    <published>2019-11-22T14:06:11.000Z</published>
    <updated>2020-03-17T03:05:56.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。 </p><h4 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h4><ul><li>把长度为n的输入序列分成两个长度为n/2的子序列；</li><li>对这两个子序列分别采用归并排序；</li><li>将两个排序好的子序列合并成一个最终的排序序列。</li></ul><p><img src="/2019/11/22/mergeSort/merge.gif" alt="image"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//归并排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] mergeSort(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low+high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">            mergeSort(a, low, mid);</span><br><span class="line">            mergeSort(a, mid+<span class="number">1</span>, high);</span><br><span class="line">            merge(a, low, mid, high);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[high-low+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> i = low;</span><br><span class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j&lt;=high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt; a[j]) &#123;</span><br><span class="line">                temp[k++] = a[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                temp[k++] = a[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i&lt;=mid) &#123;</span><br><span class="line">            temp[k++] = a[i++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (j&lt;=high) &#123;</span><br><span class="line">            temp[k++] = a[j++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x&lt;temp.length; x++) &#123;</span><br><span class="line">            a[x+low] = temp[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>递归分段，将对应的两段先排序</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h3&gt;&lt;p&gt;归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应
      
    
    </summary>
    
    
      <category term="算法" scheme="https://goolory.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="https://goolory.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>希尔排序</title>
    <link href="https://goolory.github.io/2019/11/22/shellSort/"/>
    <id>https://goolory.github.io/2019/11/22/shellSort/</id>
    <published>2019-11-22T14:05:48.000Z</published>
    <updated>2020-03-17T03:12:39.946Z</updated>
    
    <content type="html"><![CDATA[<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>算法描述<br>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p><ul><li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li><li>按增量序列个数k，对序列进行k 趟排序；</li><li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul><p><img src="/2019/11/22/shellSort/shellSort.gif" alt="images"></p><p><img src="/2019/11/22/shellSort/shellSort.webp" alt="image"></p><p><img src="/2019/11/22/shellSort/image-20191120141958866.png" alt="image-20191120141958866"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//希尔排序  //var Java10新类型 让编译器自己推断类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> gap = a.length / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap = gap / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = gap; i&lt;a.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> j = i;</span><br><span class="line">                <span class="keyword">var</span> current = a[i];</span><br><span class="line">                <span class="keyword">while</span> (j - gap &gt;= <span class="number">0</span> &amp;&amp; current &lt; a[j-gap]) &#123;</span><br><span class="line">                    a[j] = a[j - gap];</span><br><span class="line">                    j = j - gap;</span><br><span class="line">                &#125;</span><br><span class="line">                a[j] = current;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>根据间隔分组，分组后排序，减小分组间隔<br>分组后使用插入排序</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;希尔排序&quot;&gt;&lt;a href=&quot;#希尔排序&quot; class=&quot;headerlink&quot; title=&quot;希尔排序&quot;&gt;&lt;/a&gt;希尔排序&lt;/h3&gt;&lt;p&gt;算法描述&lt;br&gt;先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选
      
    
    </summary>
    
    
      <category term="算法" scheme="https://goolory.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="https://goolory.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>选择排序</title>
    <link href="https://goolory.github.io/2019/11/22/SelectionSort/"/>
    <id>https://goolory.github.io/2019/11/22/SelectionSort/</id>
    <published>2019-11-22T14:02:32.000Z</published>
    <updated>2020-03-17T03:05:56.837Z</updated>
    
    <content type="html"><![CDATA[<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>算法描述</p><ul><li><p>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p></li><li><p>初始状态：无序区为R[1..n]，有序区为空；<br>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</p></li><li><p>n-1趟结束，数组有序化了。</p></li></ul><p><img src="/2019/11/22/SelectionSort/selectionSort.gif" alt="image"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择排序 从小到大</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;a.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &gt; a[j]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = a[i];</span><br><span class="line">                    a[i] = a[j];</span><br><span class="line">                    a[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        print(a);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a&gt;选择排序&lt;/h3&gt;&lt;p&gt;算法描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：&lt;
      
    
    </summary>
    
    
      <category term="算法" scheme="https://goolory.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="https://goolory.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序</title>
    <link href="https://goolory.github.io/2019/11/22/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>https://goolory.github.io/2019/11/22/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</id>
    <published>2019-11-22T12:50:48.000Z</published>
    <updated>2020-03-17T03:05:56.869Z</updated>
    
    <content type="html"><![CDATA[<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>算法描述</p><ul><li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li><li>针对所有的元素重复以上的步骤，除了最后一个；</li><li>重复步骤1~3，直到排序完成。</li></ul><p><img src="/2019/11/22/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/bubbleSort.gif" alt="image"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//冒泡排序  从小到大</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;a.length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length-<span class="number">1</span>-j;i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &gt; a[i+<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = a[i];</span><br><span class="line">                    a[i] = a[i+<span class="number">1</span>];</span><br><span class="line">                    a[i+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        print(a);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h3&gt;&lt;p&gt;算法描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比较相邻的元素。如果第一个比第二个大，就交换它们两个；&lt;/li&gt;
&lt;li&gt;对每一对相邻元
      
    
    </summary>
    
    
      <category term="算法" scheme="https://goolory.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="https://goolory.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>插入排序</title>
    <link href="https://goolory.github.io/2019/11/22/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>https://goolory.github.io/2019/11/22/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</id>
    <published>2019-11-22T12:40:41.000Z</published>
    <updated>2020-03-17T03:05:56.876Z</updated>
    
    <content type="html"><![CDATA[<h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>具体算法描述如下：</p><ul><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤2~5。</li></ul><p><img src="/2019/11/22/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/insertSort.gif" alt="image"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>我的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接插入排序  从大到小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;a.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i; j&gt;<span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j-<span class="number">1</span>] &lt; a[j]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = a[j-<span class="number">1</span>];</span><br><span class="line">                    a[j-<span class="number">1</span>] = a[j];</span><br><span class="line">                    a[j] = temp;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        print(a);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//漂亮的代码  从小到大</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertNB</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> insertNum;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;a.length; i++) &#123;</span><br><span class="line">            insertNum = a[i];</span><br><span class="line">            <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j&gt;=<span class="number">0</span> &amp;&amp; a[j]&gt;insertNum) &#123;</span><br><span class="line">                a[j+<span class="number">1</span>] = a[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            a[j+<span class="number">1</span>] = insertNum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        print(a);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h3&gt;&lt;p&gt;具体算法描述如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从第一个元素开始，该元素可以认为已经被排序；&lt;/li&gt;
&lt;li&gt;取出下一个元素
      
    
    </summary>
    
    
      <category term="算法" scheme="https://goolory.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="https://goolory.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
